# GitHub Actionの名前
name: 'Auto Generate Commit Message'

# このアクションがトリガーされるイベントを設定します。
# pull_requestがopenされたとき、reopenされたとき、または新しいコミットがプッシュされたときに実行されます。
on:
  pull_request:
    types: [opened, reopened, synchronize]

# ジョブを定義します。
jobs:
  generate_commit_message:
    # このジョブがGitHub APIにアクセスするための権限を設定します。
    # contents: write はコミットをプッシュするために必要です。
    # pull-requests: read はプルリクエストのタイトルや本文を読み取るために必要です。
    # models: read はAIモデルを使用するために必要です。
    permissions:
      contents: write
      pull-requests: read
      models: read
    # ジョブが実行されるランナー環境を指定します。
    runs-on: ubuntu-latest
    # ジョブのステップを定義します。
    steps:
      - name: リポジトリをチェックアウト
        # actions/checkout@v4 アクションを使用してリポジトリをチェックアウトします。
        # fetch-depth: 0 は、完全なコミット履歴を取得するために必要です（diffを計算するため）。
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Gitユーザーを設定
        # コミットを作成する際に使用するGitユーザー名とメールアドレスを設定します。
        # GitHub Actionsボットとして設定するのが一般的です。
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: プルリクエストの差分を取得
        id: get_diff
        # プルリクエストのベースブランチと現在のヘッド間の差分（diff）を取得します。
        # これにより、このプルリクエストで導入された変更のみが対象となります。
        # -- . ':!*.lock' ':!.gitignore' を追加して、.lockファイルと.gitignoreファイルを除外します。
        # さらに、取得した差分内容を 'head -c 50K' で最大50KBに制限します。
        run: |
          DIFF_CONTENT=$(git diff "origin/${{ github.base_ref }}" "HEAD" -- . ':!*.lock' ':!.gitignore' | head -c 50K)
          # 複数行の文字列をGitHub Actionsの出力としてエスケープします。
          echo "diff_output<<EOF" >> $GITHUB_OUTPUT
          echo "$DIFF_CONTENT" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: AIでコミットメッセージを生成
        id: ai_message
        # actions/ai-inference@v1.0.0 アクションを使用してAIモデルからコミットメッセージを生成します。
        uses: actions/ai-inference@v1.0.0
        with:
          # 使用するAIモデルを指定します。
          model: openai/gpt-4o
          # AIに対するシステムプロンプト（AIの役割と指示）を設定します。
          system-prompt: |
            あなたはコミットメッセージを生成するAIです。
            提供されたプルリクエストのタイトル、本文、および変更内容（diff）に基づいて、簡潔で分かりやすいコミットメッセージを生成してください。
            コミットメッセージは、Conventional Commitsのスタイル（例: feat: 新機能の追加, fix: バグ修正）に従い、以下の点を考慮してください。
            - 変更の種類（feat, fix, refactor, docs, style, test, choreなど）を明確にする。
            - 変更の意図と影響を簡潔にまとめる。
            - 変更内容を具体的に記述する。
            - 冗長な説明は避け、1行目は50文字以内、全体はできるだけ短くする。
            - 日本語で生成してください。
          # AIに渡すユーザープロンプト（入力データ）を設定します。
          prompt: |
            プルリクエストのタイトル: ${{ github.event.pull_request.title }}
            プルリクエストの本文: ${{ github.event.pull_request.body }}
            変更内容 (diff):
            ${{ steps.get_diff.outputs.diff_output }}
          # AIのレスポンスの最大トークン数を設定します。コミットメッセージは通常短いため、200に設定しています。
          max-tokens: 200

      - name: AI生成メッセージで最後のコミットを修正
        # AIが生成したメッセージで、現在のブランチの最後のコミットを修正します。
        run: |
          # ローカルに修正するコミットがあるかを確認します。
          if git rev-parse HEAD &>/dev/null; then
            echo "AIが生成したメッセージで最後のコミットを修正します。"
            # AIのレスポンスを一時ファイルに書き込みます。
            echo "${{ steps.ai_message.outputs.response }}" > generated_commit_message.txt
            # git commit --amend -F コマンドを使用して、一時ファイルからメッセージを読み込み、最後のコミットメッセージを置き換えます。
            git commit --amend -F generated_commit_message.txt
            echo "修正されたコミットをプッシュします。"
            # 修正されたコミットを強制的にプッシュします。
            # --force は、履歴が変更された場合に必要です。
            git push --force
          else
            echo "修正するコミットが見つかりませんでした。コミットの修正をスキップします。"
          fi
